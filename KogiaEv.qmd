---
title: "KogiaEvents"
author: "Jackson"
format: html
editor: visual
---

## File naming and structure

The databases are named after the drifts and follow the standard SAEL naming convention, e.g. "ADRIFT_067" or "CCES_016."

All db `sqlite.3` files as well as the root directory `binary` with binary stores for all db are being kept in the same directory `raw_data`

```{r}
library(tools)
library(PAMpal)
library(tidyverse)
library(purrr)


# List of file paths to Pg Databases
myPaths <- list.files(path = "C:/Users/jackv/Documents/thesis_data/",
                      pattern = "sqlite3",
                      full.names = TRUE)

#Path to root binaries folder
myBinaryFolder <- "C:/Users/jackv/Documents/thesis_data/binaries/"

# #Add GPS csv data to Pg databases before further processing (not currently being used -JVB 6/7/2023)
# csvList <- list.files(path = "",
#                       pattern = "_GPS.csv",
#                       full.names = TRUE)
# 
# mapply(PAMmisc::addPgGps, myPaths, csvList,
#        source = 'csv',
#        format = "%Y-%m-%d %H:%M:%S")
```

## Setting up my Acoustic Study

Calling `PAMpalSettings()` I set high pass filter is set to 100 kHz, leave all other settings default.

Calling `processPgDetections()` I set `mode = 'db'` because I annotated the events in PAMguard and they should already be in the db.

```{r}
#| echo: FALSE
#create PAMpal settings
myPps <- PAMpalSettings(db = myPaths,
                        binaries = myBinaryFolder,
                        sr_hz = 'auto',
                        filterfrom_khz = 100,
                        filterto_khz = NULL,
                        winLen_sec = .001)

#Create AcousticStudy
myStudy <- processPgDetections(myPps,
                               mode = 'db',
                               id = 'vfb_thesis')
```

### Filtering events

Species classification, if known, was performed in PAMguard according to the following key:

-   "Kosp" for Kogia

-   "Phph" for harbor porpoise

-   "NBHF" for species unknown.

This was done in PAMguard by editing the event information. Therefore, species id associated with each event is already in the db and can be applied to my Acoustic Study with `setSpecies()` using `method = 'pamguard'`

This preperation is necessary to use `filter()` to extract the events of interest from the collection of all events in my Acoustic Study.

```{r}

#apply species classification to each Study as designated in PAMguard
myStudy <- setSpecies(myStudy, method = 'pamguard')

# #apply GPS data to each Study (not currently used -JVB 6/7/2023)
# myStudy <- addGps(myStudy)

#filter study object to return new study with only Kogia events
KoStudy <- filter(myStudy, species == "Kosp")
```

## Plotting Average Spectra

### All events

With the `calculateAverageSpectra()` function it is possible to characterize the Kogia signal by averaging across all events in `KoStudy`.

```{r}
#vector with the indices for all events in the study
numEv <- 1:length(events(KoStudy))

avSpec <- calculateAverageSpectra(KoStudy,
                                  evNum = numEv,
                                  title = "All Event Average Spectrum")
```

### By event

Are there outliers that could be influencing the average? By plotting events individually, I can ascertain if there is agreement between events.

```{r}
#For each event, generate concatenated spectrogram and return data frame with the the average spectrum to later plot
x1 <- lapply(numEv, function(x){
  ti <- id(events(KoStudy)[[x]])
  p <- calculateAverageSpectra(KoStudy,
                               evNum = x,
                               title = ti,
                               plot = c(TRUE, FALSE))
  
  return(data.frame(avgSpec = p$avgSpec, freq = p$freq, evName = ti))
})

#merge event dataframes for plotting
x2 <- reduce(x1, rbind)

#make single plot showing average spectra of all events individually
ggplot(x2, aes(freq, avgSpec, color = evName)) +
  geom_line() +
  ggtitle("Individual Event Spectra")
```

## Event statistics

Mean event parameters that I will use are:

-   3 db minimum frequency `fmin_3dB`

-   3 db maximum frequency `fmax_3dB`

-   peak frequency `peak`

-   3 db bandwidth `BD_3dB`

-   3 db Q `Q_3dB`

```{r}
#obtain data frame with all data from the Acoustic Study 
clickData <- getClickData(KoStudy)

#summarize click data by event, choosing key parameters
evSum <- summarise(clickData,
                     peakAvg = mean(peak),
                     BW_3dBAvg = mean(BW_3dB),
                     Q_3dBAvg = mean(Q_3dB),
                     fmin_3dBAvg = mean(fmin_3dB),
                     fmax_3dBAvg = mean(fmax_3dB),
                     .by = eventId)
 
```

### Boxplots

```{r}
#pivot from "wide" data to "long" data
evSumlong <- pivot_longer(evSum,
                         !eventId,
                         names_to = "param",
                         values_to = "freq")

#make first boxplot showing parameters fmin, fmax, and peak across the x axis.
  evSumlong %>%
    filter(param == c("peakAvg", "fmin_3dBAvg", "fmax_3dBAvg")) %>%
    ggplot(aes(x=param, y=freq))+
    geom_boxplot()+
    scale_y_continuous(limits = c(110, 140))

#make second boxplot showing parameters Q and BW across the x axis
   evSumlong %>%
    filter(param == c("Q_3dBAvg", "BW_3dBAvg")) %>%
    ggplot(aes(x=param, y=freq))+
    geom_boxplot()
    #scale_y_continuous(limits = c(110, 140))

```

## T-test

```{r}
x3 <- 2:ncol(evSum)
lapply(x3, function(p){
  qqnorm(evSum[,p])
  qqline(evSum[,p])
  ggplot(data.frame(peakAvg = evSum[,p]), aes(peakAvg))+
  geom_density()
})

```

```{r}
t.test(evSum$peakAvg, mu = 120.29)
```
